#+Title: YAGNI
#+Date: [2018-09-01 Sat]

#+OPTIONS: toc:nil num:nil ^:nil pri:t date:nil creator:t timestamp:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/my.css"/>
#+HTML_HEAD: <script type="text/javascript" src="js/my.js"></script>

#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto
#+OPTIONS: html-preamble:t html-scripts:t
#+OPTIONS: html5-fancy:t tex:t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS: org-mode emacs HTML
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+INFOJS_OPT:
#+CREATOR: <a href="https://www.gnu.org/software/emacs/"><img src="./img/emacs.png" style="width:42px;height:42px;border:0;"></a><a href="https://orgmode.org"><img src="./img/org-mode.png" style="width:42px;height:42px;border:0;"</a>
#+LATEX_HEADER:

#+BEGIN_navigator
next
#+END_navigator

* Publishing org-mode documents

** Motivation

  The motivation of this document is to go through the steps to setup
  an environment for publishing documents on the web. It's assumed
  that there's a web server installed and properly configured to serve
  static content.

  For creating a site, I decided not to use any web framework or super
  heavy tool to generate my HTML content because of the following
  reasons:
  1. I want to stick to the [[https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it][YAGNI]] principle, so I'll try to keep it
     really simple and let the project to make its own demands as it
     evolves. My purpose is to publish only static content, so at
     first glance the most obvious approach is to start with a text
     editor
  2. Don't want to use a framework that generates more code than what
     I truly need. I really dislike those tools that generate
     excessive boilerplate code that most of the cases is useless.
  3. Re-use or add more use to the tools that I already know and like.

  But why start publishing posts anyways? Well, I constantly find
  myself taking notes about things I learn or things that I want to
  remember, so I thought it would be nice to have them handy all the
  time, and what other best place than the web. Also there may be
  someone out there that may share some of my same interests so why
  not make these notes public.

  I also see this little project as an opportunity to learn from the
  experience building things from the ground up.

** Tool(s)
   The static content types that I want to publish is reduced to text
   files (=HTML=, =css=, =JavaScript=), and probably some images
   =png=, =jpeg=, etc. From this is quite obvious that I'm going to
   need a text editor, so my first choice is [[https://www.gnu.org/software/emacs/][GNU Emacs]], I've been
   using this tool for a while now, and feel quite comfortable with
   it, (...although I'm still far away from mastering the tool).

   For a while now [[https://www.gnu.org/software/emacs/][GNU Emacs]] comes with [[https://orgmode.org/][org-mode]] installed out of the
   box. [[https://orgmode.org/][org-mode]] is an Emacs mode for keeping and organizing notes on
   flat text files, this mode implements a simple and intuitive markup
   syntax that renders very nicely within the editor. [[https://orgmode.org/][org-mode]]
   provides many different tools to manipulate and work with your
   notes, among them: exporting them to other formats and publish them
   ...(ring ring) this definitely rings a bell of a right tool for
   what I want to achieve.

   In the following sections I'll try to document my [[https://orgmode.org/][org-mode]] setup for
   exporting and publishing notes.

   Hereafters, I'll be constantly referring on [[https://www.gnu.org/software/emacs/][GNU Emacs]] and [[https://orgmode.org/][org-mode]]
   terms unless where it's specified, and avoid typing their names often.

** Export notes to HTML
   Once you're familiar with the basic markup, you can start exporting
   you're notes for display, from ad-hoc presentations to more formal
   publishing. To export the current org buffer, use
   =`org-export-dispatch'= or simply =C-c C-e=, it'll prompt you with
   a new temporary buffer and the supported options to export, from
   here you can type =`h'= to select the =HTML= sub menu followed by
   =`o'= which exports the file to =HTML= and opens it in your
   preferred browser. The export offers some basic =css= for
   presenting the different mode's syntax.

   This is quite impressive the first time to try, but often you'll
   find yourself the need to export more that just one single file
   and this is were the idea of publishing becomes appealing.

** Setting up org-mode for publishing

   Before setting up [[https://orgmode.org/][org-mode]] for publishing, firs you need to define
   what files belong to your project. The files in a project fall
   within two categories:

     1. The /"exportable files"/ which will be exported (or
        transformed) from ~org~ to ~HTML~
     2. The /"attachment files"/ that serve as supporting material to
        your publication (~JPEG~, ~CSS~, etc), no transformation will
        be applied to these files

   The next step is to define the directory paths in your project. In
   the most basic case, the project needs two different of paths:

     1. /"Source"/ path, which is for working with the source
        (~org~) files and the initial place where the /"attachments"/
        will live
     2. /"Target"/ path that serves as the final container of the
        exported content, and potentially the folder that we'd want
        our web server to look at when serving the content.

   Once you have defined your files and paths, it's now time to let
   [[https://orgmode.org/][org-mode]] know about the project, and it's just as simple as
   configuring one single variable =`org-publish-project'=.

   Basically =`org-publish-project'= is a list of /"projects"/ which
   in turn each /"project"/ is itself another list whose first element
   is the project name and the remaining elements are ~:property value~
   pairs.

   For the following setup, the variable contains three projects, one
   called "posts-notes", another one called "posts-static" and a third
   one called "posts":

   #+begin_src elisp
     (setq org-publish-project-alist
           `(("posts-notes"
              :base-directory ,(getenv "POSTS_BASE_DIR")
              :base-extension "org"
              :publishing-directory ,(getenv "POSTS_TEST_DIR")
              :recursive  t
              :publishing-function org-html-publish-to-html
              :headline-levels 4
              :auto-preamble  t)
             ("posts-static"
              :base-directory ,(getenv "POSTS_BASE_DIR")
              :base-extension "css\\|jpg\\|png\\|js"
              :publishing-directory ,(getenv "POSTS_TEST_DIR")
              :recursive t
              :publishing-function org-publish-attachment)
	         ("posts"
	          :components ("posts-notes" "posts-static"))))
   #+end_src

   In this setup, the first project deals with the /"exportable
   files"/ the second project deals with the /"attachments files"/ and
   the third project groups the previous two in a single set. It is as
   well noticeable that the first two projects contain a /"source
   path"/ and a /"target path" configured under ~:base-directory~ and
   ~:publishing-directory~ respectively, which by the way I don't want
   to hard code, so I define them in environment variables.

   The properties are pretty much self explanatory but you can refer
   to the [[https://orgmode.org/org.html#Project-alist][manual]] for more information about them.

   With the current setup, it is possible to export my project to what
   I call a "/test path/" an dis just a place where I can review my
   publication before I can send it out to the real public site. So in
   order to move my files to the actual publishing site, I add three
   additional /"projects"/ to =`org-publish-project-alist'=, and the
   new projects happen to be identical to the previous three, except
   for their names and their /"target paths"/:

   #+begin_src elisp
         ...
         ("posts-notes-remote"
          :base-directory ,(getenv "POSTS_BASE_DIR")
          :publishing-directory ,(getenv "POSTS_PUBLISH_DIR")
          :recursive t
          :publishing-function org-html-publish-to-html)
         ("posts-static-remote"
          :base-directory ,(getenv "POSTS_BASE_DIR")
          :base-extension "css\\|jpg\\|png\\|js"
          :publishing-directory ,(getenv "POSTS_PUBLISH_DIR")
          :recursive t
          :publishing-function org-publish-attachment)
         ("posts-push"
          :components ("posts-notes-remote" "posts-static-remote"))))
   #+end_src

   The /"target paths"/ for the real publishing site point to a
   remote server, so the value of the remote folder can be represented
   as: ="/ssh:user@server:/path/to/dir/"=

   Finally, I don't like to clutter my ~init.el~ with all these
   configuration details, so I put this configuration in a separate
   file which I named ~publish.el~, and I can load it from my ~init.el~:

   #+begin_src elisp
      ;; ... somewhere in init.d
      (load "publish.el")
   #+end_src

** Summary
   In the current post we went through the steps of exporting ~org~
   files to different formats with focus on ~HTML~ exports. Then
   proceeded to configure an exportable project which may consist of
   multiple files and where the final product can be published in a
   web site.

   In the following posts, I'll try to got through the steps of
   defining some export configuration templates to be used in the
   ~org~ files. Then go through the steps of giving a little bit more
   bit appealing to your exported project using some basic ~CSS~.

** See also
   1. [[https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html][Publish html tutorial]]
   2. [[https://github.com/quicoju/emacs.d][My Emacs config]]

#+BEGIN_navigator
next
#+END_navigator
