#+TITLE: YAGNI
#+DATE: 2025-05-01
#+SUBTITLE: You are(n't)? gonna need it...
#+DESCRIPTION: Debug a FreeRTOS RISC-V demo running on QEMU
#+KEYWORDS: debug freertos riscv qemu openbsd

#+HTML_LINK_HOME: index.html
#+HTML_LINK_UP: 3.html

* Debug a FreeRTOS RISC-V application running on QEMU

** About

The [[./3.org][previous]] post explained how to use OpenBSD to build and run a FreeRTOS
RISC-V "demo" inside QEMU. This post will explain how to build the same
application for debugging and setup the tools to debug it.

** Install GDB for RISC-V

In OpenBSD, the package =riscv32-esp-elf-gdb= provides the debugger for the
RISC-V architecture targeted for bare-metal applications, it can be installed by
running:

#+begin_src sh
  pkg_add riscv32-esp-elf-gdb
#+end_src

The debugger executable will be installed in
=/usr/local/riscv32-esp-elf/bin/riscv32-esp-elf-gdb=. For convenience it's a
good idea to define an alias for this long path:

#+begin_src sh
  alias gdb-rv=/usr/local/riscv32-esp-elf/bin/riscv32-esp-elf-gdb
#+end_src

** Build application with debugging symbols

[[./3.org][Previously]] we used the FreeRTOS' [[https://github.com/FreeRTOS/FreeRTOS/tree/main/FreeRTOS/Demo/RISC-V-Qemu-virt_GCC][RISC-V-Qemu-virt_GCC]] demo as an example; in
this post we'll continue to use the same example. To build the application for
debugging, we need to edit the =Makefile= so it uses the correct =CFLAGS= for
debugging.

Replace the following flags:
#+begin_src c
  ifeq ($(DEBUG), 1)
    CFLAGS += -Og -ggdb3
#+end_src

With these flags (refer to [[See also]] section for details):
#+begin_src c
  ifeq ($(DEBUG), 1)
    CFLAGS += -O0 -gdwarf-2
#+end_src

The application can now be built for debugging:
#+begin_src sh
  DEBUG=1 gmake
#+end_src

** Run the application

Run the application with =qemu= using the =-s= switch, this will enable the gdb
server and will make it reachable on /port 1234/:
#+begin_src sh
    # run the demo
  qemu-system-riscv32 -s -nographic -machine virt -net none \
  -chardev stdio,id=con,mux=on -serial chardev:con \
  -mon chardev=con,mode=readline -bios none \
  -smp 4 -kernel ./build/RTOSDemo.axf
#+end_src

** Connect GDB with the remote target

Once the application is running, we can execute =gdb= in another terminal and
connect to the remote target. Using the alias previously defined:

#+begin_src sh
  gdb-rv build/RTOSDemo.axf
#+end_src

From the =gdb='s prompt, set the architecture, then connect to the remote target
and finally set a breakpoint:

#+begin_src text
  (gdb) set architecture riscv:rv64
  (gdb) target remote localhost:1234
  (gdb) b main_blinky.c:81
  Breakpoint 1 at 0x800001f4: file main_blinky.c, line 81.
  (gdb) continue
#+end_src

After entering the =continue= command, the application will to execute until it
hits the breakpoint; at this point we have our debugging session ready to use.

** See also

1. The [[https://github.com/FreeRTOS/FreeRTOS/tree/main/FreeRTOS/Demo/RISC-V-Qemu-virt_GCC][FreeRTOS demo]]
2. [[https://www.reddit.com/r/RISCV/comments/plgwyk/riscv64unknownelfgdb_gives_dwarf_error_when/][Solution]] for Dwarf2 error in GDB
3. [[https://course.ece.cmu.edu/~ee349/f-2012/lab2/qemu.pdf][QEMU + GDB Debugging Environment]]


#  LocalWords:  QEMU OpenBSD GDB breakpoint
