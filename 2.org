#+TITLE: YAGNI
#+DATE: [2025-01-17 Fri]
#+SUBTITLE:
#+DESCRIPTION:
#+KEYWORDS: gentooo embedded esp32

#+BEGIN_navigator
next
#+END_navigator

* Setup ESP32 development tools in Gentoo

** About

The [[https://en.wikipedia.org/wiki/ESP32][ESP32]] is a family of cost accessible microcontrollers with many features
that make them attractive to embedded systems hobbyists.

[[https://github.com/espressif/esp-idf][ESP-IDF]] is Esspressif's official IoT development framework for a number of ESP32
SoC. Gentoo's main repository doesn't provide an ebuild for this framework, but
it's available in the [[https://wiki.gentoo.org/wiki/Project:GURU][GURU]] repository.

This post will explain the steps to install the ESP-IDF framework, then use it
to build a sample project and flash it into a ESP32-C3 development board.

** Install ESP-IDF

Enable the GURU repository and synchronize it, the preferred way is using
[[https://wiki.gentoo.org/wiki/Eselect/Repository][eselect-repository]]:

#+begin_src sh
  eselect repository enable guru
  emaint sync -r guru
#+end_src

It's important to /[[https://wiki.gentoo.org/wiki//etc/portage/package.use][enable]]/ the =riscv32= use flag if one is going to be
developing for a board with a RISCV microcontroller (i.e. ESP32-C3).

By the time of this writing, the following packages had to be [[https://wiki.gentoo.org/wiki//etc/portage/package.accept_keywords][unmasked]] before
being able to install the framework:

#+begin_src text
$ cat /etc/portage/package.accept_keywords/esp-idf 
dev-embedded/esp-*::guru
dev-embedded/freertos-gdb::guru
dev-embedded/idf-component-manager::guru
dev-python/jsonref
dev-python/kconfiglib
dev-python/pydantic-settings
dev-python/schema
#+end_src

Install the ESP-IDF framework:

#+begin_src sh
  emerge -a esp-idf
#+end_src


** Build and flash a test project

The ESP-IDF framework comes with a number of examples. This section explains the
steps to follow for building and flashing the /hello_world/ project included in
the framework:

#+begin_src text
  $ EXAMPLE=$(equery f esp-idf | grep /hello_world | head -1)
  $ tree $EXAMPLE
  /usr/share/esp-idf/examples/get-started/hello_world
  ├── CMakeLists.txt
  ├── README.md
  ├── main
  │   ├── CMakeLists.txt
  │   └── hello_world_main.c
  ├── pytest_hello_world.py
  └── sdkconfig.ci
#+end_src

To build the project, copy the /hello_world/ direcotyr to a place with write
permissions (i.e. the user's /home/ direcory).

#+begin_src sh
  cp -r $EXAMPLE ~
  cd ~/hello_world
#+end_src

Now configure the project's target to the correct development board; in this
example it's set to =esp32c3= that corresponds to the /ESP32-C3-DevKitC/.

#+begin_src sh
  idf set-target esp32c3
#+end_src

Connect the development board to the computer and proceed to build it, flash it
and monitor the execution:

#+begin_src sh
  idf build
  idf flash monitor
#+end_src

The =PORT= used for flashing the microcontroller should be automatically
detected; if it wasn't, refer to the links in the /See also/ section.

** See also
  1. [[https://github.com/espressif/esp-idf][The ESP-IDF repository]]
  2. [[https://docs.espressif.com/projects/esp-idf/en/latest/esp32c3/index.html][The ESP-IDF programming guide]]
  3. [[https://docs.espressif.com/projects/esp-idf/en/latest/esp32c3/get-started/linux-macos-setup.html#get-started-linux-macos-first-steps][Build the hello_world example from the manual]]


**** Created on 2025-01-17

#  LocalWords:  RISCV microcontrollers microcontroller
