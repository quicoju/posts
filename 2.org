#+TITLE: You ain't gonna need it
#+DATE: [2018-10-07 Sun]
#+SUBTITLE: ...for sure
#+DESCRIPTION: Add CSS to org-mode exported HTML
#+KEYWORDS: org-mode emacs html css 

#+OPTIONS: toc:nil num:nil ^:nil pri:t date:nil creator:t timestamp:nil
#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto
#+OPTIONS: html-preamble:t html-scripts:t html-style:nil
#+OPTIONS: html5-fancy:t tex:t

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/my.css"/>
#+HTML_HEAD: <script type="text/javascript" src="js/my.js"></script>
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD_EXTRA:
#+INFOJS_OPT:
#+CREATOR: <a href="https://www.gnu.org/software/emacs/"><img src="./img/emacs.png" style="width:42px;height:42px;border:0;"></a><a href="https://orgmode.org"><img src="./img/org-mode.png" style="width:42px;height:42px;border:0;"</a>
#+LATEX_HEADER:

#+BEGIN_navigator
#+END_navigator

* Adding style to your org-mode exported HTML

** Introduction

   As [[./1][previously]] described, the purpose of these series of posts is to
   setup an environment for publishing posts in internet, using tools
   with minimal configuration to keep the process simple.

   Exporting ~org-mode~ files into ~HTML~ offers as a result a nice
   and simple representation of the document where document sections,
   tags, code blocks, time stamps, etc can be properly identifiable
   and addressed my external code, but the feel and look of the page
   content sometimes isn't enough for presenting it, that's when
   [[https://en.wikipedia.org/wiki/Cascading_Style_Sheets][cascade style sheets]] (~CSS~) become interesting and useful.

   The following sections will describe in short how to use ~CCS~ to
   enhance the presentation of your content. Definitely I'm far from
   being a designer, but the intention is to give a feel that it isn't
   that hard to add style to your post, as I thought before playing
   with this.

** Starting the CSS file

   The basic idea behind CSS is simple, separate the content from it's
   presentation, by identifying the content elements (HTML in this
   case) by element type, class or ID, then assign or set properties
   to the selected elements, hence the importance of properly
   organize, and name the different elements in content document.

   The basic format of a ~CSS~ file is a series of selectors followed
   by a declaration block, inside this block there are pairs of
   ~property:~ ~value~ pairs, separated by a semicolon like in:

   #+begin_src css
     body {                /* selector */
          color: #444;     /* property: value pairs  */
          width: auto;     /* separated by semicolon */
          max-width: 55em;
          margin: 0 auto;
     }
   #+end_src

   Where C-style comments are allowed. The selectors, as their name
   implies, are used "select" or identify elements within the HTML
   document. The elements can be selected by element type like
   "/body/" or "/h1/", by "/class/" property as in ~h1.title~ or by
   "/id/" which uniquely identifies the element as ~#id~.

   To begin with the style sheet, the first step is to create an empty
   file under the =$POSTS_BASE_DIR/css= directory and call it
   =my.css=, then we need to tell the ~org~ file to include the file
   in the exported ~HTML~, we do this my adding the following line in
   the header section of the ~org~ file:

   #+begin_src org
     #+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/my.css"/>
   #+end_src
   
   Which basically is just an =HTML= line telling information about the
   style-sheet name, location and file type.
   
** Adding style blocks to *my.css*

   In this section we'll start adding a few blocks to the ~my.css~
   file, the plan is to go through a few of them, but if you'd like to
   see the whole file you can find it in the [[https://github.com/quicoju/posts/blob/master/css/my.css]["YAGNI posts" in GitHub]].

   Also it worth mentioning that the Firefox developer tools were
   invaluable for experimenting and playing around with ~CSS~, the
   tool box is quite intuitive to use, and can be opened by pressing
   the ~F12~ key on the tab that you want to work on.

   To begin with, set the global information for the body, which will
   be selected by ~body~, mainly I used it to set the font ~color~,
   then set the width as ~auto~ for auto wrap the text when resizing
   the browser or also good for browsing on mobile devices, also
   another good setting is ~max-width~ to prevent the text span all
   across the browser screen.

   #+begin_src css
     body {
         color: #444;
         width: auto;
         max-width: 55em;
         margin: 0 auto;
     }
   #+end_src

   Then, the next block is to set the style for the title, selected by
   the class "title":

   #+begin_src css
     h1.title {
         /* Margin and text */
         font-size: 2em;
         margin-top: 40px;
         text-align: center;
         letter-spacing: -2px;
         color: #eeeeee;
         padding: 0.5em;

         /* title frame and background */
         border: 8px #333 double;
         border-radius: 30px;
         box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);

         background-clip: padding-box;
         background-color: #5d478b;
         background-image: linear-gradient(#5d478b, #bf90ff);
     }
   #+end_src

   The first paragraph sets the properties for the text, then the
   second one focuses on setting the border style of the container
   box, and finally the last paragraph is to set the background
   properties of the box.

   The following block is to set the actual post container which is a
   div element of class "outline-2", and the most important thing to
   note is the properties of the box: shadow, border and background.

   #+begin_src css
     div.outline-2 {
         box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);
         border-radius: 30px;
         margin: 16px;
         color: #000;
         background-color: #fff;
         padding: 0.01em 16px;
     }
   #+end_src

   Now define the properties of the header elements, ~h2~, ~h3~, etc.

   #+begin_src css
     h2 {
         font-size: 1.7em;
         font-weight: 0;
         margin-top: 30px;
         text-align: center;
         letter-spacing: -1px;
         color: #5d478b;
     }
   #+end_src

   Then the code/verbatim snippets embedded in the text, I choose to
   display it in a box with visible border, a nice option is
   ~white-space: nowrap~ to prevent the box for wrapping when the
   content is to long for the remaining space, it'll display the text
   in the next line instead.

   #+begin_src css
     code {
         padding: 2px 5px;
         margin: auto 1px;
         border: 1px solid #bbb;
         border-radius: 5px;
         background-clip: padding-box;
         color: #333;
         font-size: 90%;
         white-space: nowrap;
     }
   #+end_src

   Finally the style for the code blocks, the highlight here is the
   ~overflow~ option which controls the behavior when the text doesn't
   fit in the visible box, you can set it to be scrollable, or simply
   jut ~auto~ like in this case.

   #+begin_src css
     .org-src-container {
         border: 1px solid #ccc;
         box-shadow: 3px 3px 3px #eee;
         font-family: Lucida Console, monospace;
         font-size: 80%;
         margin: 1em auto;
         padding: .1em .5em;
         position: relative;
         background: black;
         color: white;
         overflow: auto;
     }
   #+end_src

** Summary
   the purpose of this post was to use ~CSS~ to give a nice
   presentation to the exported ~org~ files, mostly focused on the
   title, the post body, headers and code boxes.

   In the following post, I'll talk on a simple way to implement the
   post navigator links using plain javascript.

** See also
   1. [[https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html][Publish html tutorial]]
   2. [[https://github.com/quicoju/emacs.d][My Emacs config]]
   3. [[https://github.com/quicoju/posts][YAGNI posts on GitHub]]


